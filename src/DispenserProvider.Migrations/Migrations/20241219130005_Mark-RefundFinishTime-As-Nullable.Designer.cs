// <auto-generated />
using System;
using DispenserProvider.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DispenserProvider.DataBase.Migrations
{
    [DbContext(typeof(DispenserContext))]
    [Migration("20241219130005_Mark-RefundFinishTime-As-Nullable")]
    partial class MarkRefundFinishTimeAsNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DispenserProvider.DataBase.Models.BuilderDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("ProviderAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(42)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<long>("TransactionDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("WeiAmount")
                        .IsRequired()
                        .HasColumnType("nvarchar(78)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("Builders");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.DispenserDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CreationLogSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(132)");

                    b.Property<string>("DeletionLogSignature")
                        .HasColumnType("nvarchar(132)");

                    b.Property<long?>("RefundDetailId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RefundFinishTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(132)");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(42)");

                    b.Property<long>("WithdrawalDetailId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreationLogSignature");

                    b.HasIndex("DeletionLogSignature");

                    b.HasIndex("RefundDetailId")
                        .IsUnique()
                        .HasFilter("[RefundDetailId] IS NOT NULL");

                    b.HasIndex("Signature")
                        .IsUnique()
                        .HasFilter("[Signature] IS NOT NULL");

                    b.HasIndex("WithdrawalDetailId")
                        .IsUnique();

                    b.ToTable("Dispenser");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.LogDTO", b =>
                {
                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(132)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Signature");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.SignatureDTO", b =>
                {
                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(132)");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Signature");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.TransactionDetailDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChainId")
                        .HasColumnType("bigint");

                    b.Property<long>("PoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.BuilderDTO", b =>
                {
                    b.HasOne("DispenserProvider.DataBase.Models.TransactionDetailDTO", "TransactionDetail")
                        .WithMany("Builders")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.DispenserDTO", b =>
                {
                    b.HasOne("DispenserProvider.DataBase.Models.LogDTO", "CreationLog")
                        .WithMany("CreationDispensers")
                        .HasForeignKey("CreationLogSignature")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DispenserProvider.DataBase.Models.LogDTO", "DeletionLog")
                        .WithMany("DeletionDispensers")
                        .HasForeignKey("DeletionLogSignature")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispenserProvider.DataBase.Models.TransactionDetailDTO", "RefundDetail")
                        .WithOne("RefundDispenser")
                        .HasForeignKey("DispenserProvider.DataBase.Models.DispenserDTO", "RefundDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispenserProvider.DataBase.Models.SignatureDTO", "UserSignature")
                        .WithOne("Dispenser")
                        .HasForeignKey("DispenserProvider.DataBase.Models.DispenserDTO", "Signature")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispenserProvider.DataBase.Models.TransactionDetailDTO", "WithdrawalDetail")
                        .WithOne("WithdrawalDispenser")
                        .HasForeignKey("DispenserProvider.DataBase.Models.DispenserDTO", "WithdrawalDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreationLog");

                    b.Navigation("DeletionLog");

                    b.Navigation("RefundDetail");

                    b.Navigation("UserSignature");

                    b.Navigation("WithdrawalDetail");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.LogDTO", b =>
                {
                    b.Navigation("CreationDispensers");

                    b.Navigation("DeletionDispensers");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.SignatureDTO", b =>
                {
                    b.Navigation("Dispenser")
                        .IsRequired();
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.TransactionDetailDTO", b =>
                {
                    b.Navigation("Builders");

                    b.Navigation("RefundDispenser")
                        .IsRequired();

                    b.Navigation("WithdrawalDispenser")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
