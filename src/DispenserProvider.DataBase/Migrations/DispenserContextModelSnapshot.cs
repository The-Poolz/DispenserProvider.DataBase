// <auto-generated />
using System;
using DispenserProvider.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DispenserProvider.DataBase.Migrations
{
    [DbContext(typeof(DispenserContext))]
    partial class DispenserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DispenserProvider.DataBase.Models.BuilderDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(36,18)");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("TransactionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionDetailId");

                    b.ToTable("Builders");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.DispenserProviderDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RefundDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(42)");

                    b.Property<int>("WithdrawalDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RefundDetailId")
                        .IsUnique()
                        .HasFilter("[RefundDetailId] IS NOT NULL");

                    b.HasIndex("WithdrawalDetailId")
                        .IsUnique();

                    b.ToTable("DispenserProvider");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.SignatureDTO", b =>
                {
                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("Signature");

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.TransactionDetailDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ChainId")
                        .HasColumnType("bigint");

                    b.Property<string>("DispenserProviderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("PoolId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TransactionDetails");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.BuilderDTO", b =>
                {
                    b.HasOne("DispenserProvider.DataBase.Models.TransactionDetailDTO", "TransactionDetail")
                        .WithMany("Builders")
                        .HasForeignKey("TransactionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionDetail");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.DispenserProviderDTO", b =>
                {
                    b.HasOne("DispenserProvider.DataBase.Models.TransactionDetailDTO", "RefundDetail")
                        .WithOne()
                        .HasForeignKey("DispenserProvider.DataBase.Models.DispenserProviderDTO", "RefundDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DispenserProvider.DataBase.Models.TransactionDetailDTO", "WithdrawalDetail")
                        .WithOne("DispenserProvider")
                        .HasForeignKey("DispenserProvider.DataBase.Models.DispenserProviderDTO", "WithdrawalDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefundDetail");

                    b.Navigation("WithdrawalDetail");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.SignatureDTO", b =>
                {
                    b.HasOne("DispenserProvider.DataBase.Models.DispenserProviderDTO", "DispenserProvider")
                        .WithOne("UserSignature")
                        .HasForeignKey("DispenserProvider.DataBase.Models.SignatureDTO", "Signature")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DispenserProvider");
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.DispenserProviderDTO", b =>
                {
                    b.Navigation("UserSignature")
                        .IsRequired();
                });

            modelBuilder.Entity("DispenserProvider.DataBase.Models.TransactionDetailDTO", b =>
                {
                    b.Navigation("Builders");

                    b.Navigation("DispenserProvider")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
